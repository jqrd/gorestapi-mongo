{
    "swagger": "2.0",
    "info": {
        "description": "This is a sample server celler server.",
        "title": "Swagger Example API",
        "termsOfService": "http://swagger.io/terms/",
        "contact": {
            "name": "API Support",
            "url": "http://www.swagger.io/support",
            "email": "support@swagger.io"
        },
        "license": {
            "name": "Apache 2.0",
            "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
        },
        "version": "1.0"
    },
    "host": "localhost:8080",
    "basePath": "/api/v1",
    "paths": {
        "/things": {
            "get": {
                "description": "Find things",
                "tags": [
                    "things"
                ],
                "summary": "Find things",
                "operationId": "Find",
                "parameters": [
                    {
                        "type": "string",
                        "description": "query",
                        "name": "q",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "offset",
                        "name": "offset",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "limit",
                        "name": "limit",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/svc.Thing"
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid Argument",
                        "schema": {
                            "$ref": "#/definitions/render.ErrResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Error",
                        "schema": {
                            "$ref": "#/definitions/render.ErrResponse"
                        }
                    }
                }
            },
            "post": {
                "description": "Create a thing",
                "tags": [
                    "things"
                ],
                "summary": "Create a thing",
                "operationId": "ThingsAPI.Create",
                "parameters": [
                    {
                        "description": "Thing",
                        "name": "thing",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/svc.Thing"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/svc.Thing"
                        }
                    },
                    "400": {
                        "description": "Invalid Argument",
                        "schema": {
                            "$ref": "#/definitions/render.ErrResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Error",
                        "schema": {
                            "$ref": "#/definitions/render.ErrResponse"
                        }
                    }
                }
            }
        },
        "/things/{id}": {
            "get": {
                "description": "Get a thing",
                "tags": [
                    "things"
                ],
                "summary": "Get ting",
                "operationId": "ThingsAPI.GetByID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/svc.Thing"
                        }
                    },
                    "400": {
                        "description": "Invalid Argument",
                        "schema": {
                            "$ref": "#/definitions/render.ErrResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/render.ErrResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Error",
                        "schema": {
                            "$ref": "#/definitions/render.ErrResponse"
                        }
                    }
                }
            },
            "delete": {
                "description": "Delete a thing",
                "tags": [
                    "things"
                ],
                "summary": "Delete thing",
                "operationId": "ThingsAPI.DeleteByID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Success"
                    },
                    "400": {
                        "description": "Invalid Argument",
                        "schema": {
                            "$ref": "#/definitions/render.ErrResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/render.ErrResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Error",
                        "schema": {
                            "$ref": "#/definitions/render.ErrResponse"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "model.WidgetType": {
            "type": "integer",
            "enum": [
                0,
                1,
                2,
                3
            ],
            "x-enum-varnames": [
                "WidgetType_Unspecified",
                "WidgetType_Type1",
                "WidgetType_Type2",
                "WidgetType_Special"
            ]
        },
        "render.ErrResponse": {
            "type": "object",
            "properties": {
                "error": {
                    "type": "string"
                },
                "request_id": {
                    "type": "string"
                },
                "status": {
                    "type": "string"
                }
            }
        },
        "svc.Thing": {
            "type": "object",
            "properties": {
                "description": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "widgets": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/svc.ThingWidget"
                    }
                }
            }
        },
        "svc.ThingWidget": {
            "type": "object",
            "properties": {
                "name": {
                    "type": "string"
                },
                "type": {
                    "$ref": "#/definitions/model.WidgetType"
                },
                "widgetId": {
                    "type": "string"
                }
            }
        }
    },
    "securityDefinitions": {
        "ApiKeyAuth": {
            "type": "apiKey",
            "name": "Authorization",
            "in": "header"
        },
        "BasicAuth": {
            "type": "basic"
        },
        "OAuth2AccessCode": {
            "type": "oauth2",
            "flow": "accessCode",
            "authorizationUrl": "https://example.com/oauth/authorize",
            "tokenUrl": "https://example.com/oauth/token",
            "scopes": {
                "admin": " Grants read and write access to administrative information"
            }
        },
        "OAuth2Application": {
            "type": "oauth2",
            "flow": "application",
            "tokenUrl": "https://example.com/oauth/token",
            "scopes": {
                "admin": " Grants read and write access to administrative information",
                "write": " Grants write access"
            }
        },
        "OAuth2Implicit": {
            "type": "oauth2",
            "flow": "implicit",
            "authorizationUrl": "https://example.com/oauth/authorize",
            "scopes": {
                "admin": " Grants read and write access to administrative information",
                "write": " Grants write access"
            }
        },
        "OAuth2Password": {
            "type": "oauth2",
            "flow": "password",
            "tokenUrl": "https://example.com/oauth/token",
            "scopes": {
                "admin": " Grants read and write access to administrative information",
                "read": " Grants read access",
                "write": " Grants write access"
            }
        }
    },
    "x-extension-openapi": {
        "example": "value on a json format"
    }
}